---
layout: publication
title: Linear Probing Revisited Tombstones Mark The Death Of Primary Clustering
authors: Bender Michael A., Kuszmaul Bradley C., Kuszmaul William
conference: "Arxiv"
year: 2021
bibkey: bender2021linear
additional_links:
  - {name: "Paper", url: "https://arxiv.org/abs/2107.01250"}
tags: ['ARXIV', 'Unsupervised']
---
First introduced in 1954, linear probing is one of the oldest data structures in computer science, and due to its unrivaled data locality, it continues to be one of the fastest hash tables in practice. It is widely believed and taught, however, that linear probing should never be used at high load factors; this is because primary-clustering effects cause insertions at load factor \{&#37; raw &#37;\}\\(1 - 1 /x\\)\{&#37; endraw &#37;\} to take expected time \{&#37; raw &#37;\}\\(\Theta(x^2)\\)\{&#37; endraw &#37;\} (rather than the ideal \{&#37; raw &#37;\}\\(\Theta(x)\\)\{&#37; endraw &#37;\}). The dangers of primary clustering, first discovered by Knuth in 1963, have been taught to generations of computer scientists, and have influenced the design of some of many widely used hash tables. We show that primary clustering is not a foregone conclusion. We demonstrate that small design decisions in how deletions are implemented have dramatic effects on the asymptotic performance of insertions, so that, even if a hash table operates continuously at a load factor \{&#37; raw &#37;\}\\(1 - \Theta(1/x)\\)\{&#37; endraw &#37;\}, the expected amortized cost per operation is \{&#37; raw &#37;\}\\(\tilde\{O\}(x)\\)\{&#37; endraw &#37;\}. This is because tombstones created by deletions actually cause an anti-clustering effect that combats primary clustering. We also present a new variant of linear probing (which we call graveyard hashing) that completely eliminates primary clustering on \emph\{any\} sequence of operations: if, when an operation is performed, the current load factor is \{&#37; raw &#37;\}\\(1 - 1/x\\)\{&#37; endraw &#37;\} for some \{&#37; raw &#37;\}\\(x\\)\{&#37; endraw &#37;\}, then the expected cost of the operation is \{&#37; raw &#37;\}\\(O(x)\\)\{&#37; endraw &#37;\}. One corollary is that, in the external-memory model with a data blocks of size \{&#37; raw &#37;\}\\(B\\)\{&#37; endraw &#37;\}, graveyard hashing offers the following remarkable guarantee: at any load factor \{&#37; raw &#37;\}\\(1 - 1/x\\)\{&#37; endraw &#37;\} satisfying \{&#37; raw &#37;\}\\(x = o(B)\\)\{&#37; endraw &#37;\}, graveyard hashing achieves \{&#37; raw &#37;\}\\(1 + o(1)\\)\{&#37; endraw &#37;\} expected block transfers per operation. Past external-memory hash tables have only been able to offer a \{&#37; raw &#37;\}\\(1 + o(1)\\)\{&#37; endraw &#37;\} guarantee when the block size \{&#37; raw &#37;\}\\(B\\)\{&#37; endraw &#37;\} is at least \{&#37; raw &#37;\}\\(\Omega(x^2)\\)\{&#37; endraw &#37;\}.
