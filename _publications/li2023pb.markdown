---
layout: publication
title: Pb-hash Partitioned B-bit Hashing
authors: Li Ping, Zhao Weijie
conference: "Arxiv"
year: 2023
bibkey: li2023pb
additional_links:
  - {name: "Paper", url: "https://arxiv.org/abs/2306.15944"}
tags: ['ARXIV', 'Deep Learning', 'Supervised']
---
Many hashing algorithms including minwise hashing (MinHash), one permutation hashing (OPH), and consistent weighted sampling (CWS) generate integers of \{&#37; raw &#37;\}\\(B\\)\{&#37; endraw &#37;\} bits. With \{&#37; raw &#37;\}\\(k\\)\{&#37; endraw &#37;\} hashes for each data vector, the storage would be \{&#37; raw &#37;\}\\(B\times k\\)\{&#37; endraw &#37;\} bits; and when used for large-scale learning, the model size would be \{&#37; raw &#37;\}\\(2^B\times k\\)\{&#37; endraw &#37;\}, which can be expensive. A standard strategy is to use only the lowest \{&#37; raw &#37;\}\\(b\\)\{&#37; endraw &#37;\} bits out of the \{&#37; raw &#37;\}\\(B\\)\{&#37; endraw &#37;\} bits and somewhat increase \{&#37; raw &#37;\}\\(k\\)\{&#37; endraw &#37;\}, the number of hashes. In this study, we propose to re-use the hashes by partitioning the \{&#37; raw &#37;\}\\(B\\)\{&#37; endraw &#37;\} bits into \{&#37; raw &#37;\}\\(m\\)\{&#37; endraw &#37;\} chunks, e.g., \{&#37; raw &#37;\}\\(b\times m =B\\)\{&#37; endraw &#37;\}. Correspondingly, the model size becomes \{&#37; raw &#37;\}\\(m\times 2^b \times k\\)\{&#37; endraw &#37;\}, which can be substantially smaller than the original \{&#37; raw &#37;\}\\(2^B\times k\\)\{&#37; endraw &#37;\}. Our theoretical analysis reveals that by partitioning the hash values into \{&#37; raw &#37;\}\\(m\\)\{&#37; endraw &#37;\} chunks, the accuracy would drop. In other words, using \{&#37; raw &#37;\}\\(m\\)\{&#37; endraw &#37;\} chunks of \{&#37; raw &#37;\}\\(B/m\\)\{&#37; endraw &#37;\} bits would not be as accurate as directly using \{&#37; raw &#37;\}\\(B\\)\{&#37; endraw &#37;\} bits. This is due to the correlation from re-using the same hash. On the other hand, our analysis also shows that the accuracy would not drop much for (e.g.,) \{&#37; raw &#37;\}\\(m=2\sim 4\\)\{&#37; endraw &#37;\}. In some regions, Pb-Hash still works well even for \{&#37; raw &#37;\}\\(m\\)\{&#37; endraw &#37;\} much larger than 4. We expect Pb-Hash would be a good addition to the family of hashing methods/applications and benefit industrial practitioners. We verify the effectiveness of Pb-Hash in machine learning tasks, for linear SVM models as well as deep learning models. Since the hashed data are essentially categorical (ID) features, we follow the standard practice of using embedding tables for each hash. With Pb-Hash, we need to design an effective strategy to combine \{&#37; raw &#37;\}\\(m\\)\{&#37; endraw &#37;\} embeddings. Our study provides an empirical evaluation on four pooling schemes: concatenation, max pooling, mean pooling, and product pooling. There is no definite answer which pooling would be always better and we leave that for future study.
